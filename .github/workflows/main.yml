name: Daily EPG Update

on:
  schedule:
    - cron: '0 8 * * *'
  workflow_dispatch:

jobs:
  update_epg:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up jq (if not already present)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Run EPG Download Script
        run: |
          #!/bin/bash
          set -e

          REPO_DIR="${GITHUB_WORKSPACE:-$(pwd)}"
          INPUT_JSON="$REPO_DIR/epg/urls/link.json"
          DEST_DIR="$REPO_DIR/epg/xml"
          OUTPUT_JSON="$REPO_DIR/epg/stable-epg-sources.json"
          RAW_BASE_URL="https://raw.githubusercontent.com/${{ github.repository }}/HEAD/epg/xml"

          echo "REPO_DIR: $REPO_DIR"
          echo "INPUT_JSON: $INPUT_JSON"
          echo "DEST_DIR: $DEST_DIR"
          echo "OUTPUT_JSON: $OUTPUT_JSON"
          echo "RAW_BASE_URL: $RAW_BASE_URL"


          mkdir -p "$DEST_DIR"

          echo "Inizio download EPG..."

          declare -A country_links

          if [[ ! -f "$INPUT_JSON" ]]; then
            echo "Errore: File input JSON non trovato: $INPUT_JSON"
            exit 1
          fi

          mapfile -t countries < <(jq -r 'keys[]' "$INPUT_JSON")

          if [ ${#countries[@]} -eq 0 ]; then
              echo "Nessun paese trovato nel JSON. Uscita."
              echo '{}' > "$OUTPUT_JSON"
              exit 0
          fi


          for country in "${countries[@]}"; do
            mapfile -t urls < <(jq -r --arg c "$country" '.[$c][]' "$INPUT_JSON")
            for url in "${urls[@]}"; do
              filename=$(basename "$url")
              base="${filename%.xml.gz}"
              base="${base%.xml}"
              output_file="guide-${base}.xml"
              temp_file="temp_${base}.xml.gz"

              echo "Scarico: $url"
              if curl -fsSL --connect-timeout 10 --retry 5 --retry-delay 5 "$url" -o "$temp_file"; then
                mime_type=$(file --mime-type --brief "$temp_file")
                echo "Detected MIME type: $mime_type"

                if [[ "$mime_type" == "application/gzip" ]]; then
                  echo "📦 Scompatto GZ: $temp_file"
                  if gunzip -c "$temp_file" > "$DEST_DIR/$output_file"; then
                      echo "✅ Scompattato e salvato: $DEST_DIR/$output_file"
                      country_links["$country"]+="$RAW_BASE_URL/$output_file "
                  else
                      echo "❌ Errore nella scompattazione di $temp_file"
                      rm -f "$temp_file"
                  fi
                elif [[ "$mime_type" == "application/xml" || "$mime_type" == "text/xml" ]]; then
                  echo "File XML non compresso: Copio $temp_file"
                  mv "$temp_file" "$DEST_DIR/$output_file"
                  echo "✅ Copiato e salvato: $DEST_DIR/$output_file"
                  country_links["$country"]+="$RAW_BASE_URL/$output_file "
                else
                   echo "❌ Tipo MIME sconosciuto o non supportato ($mime_type) per $url"
                   rm -f "$temp_file"
                fi
                rm -f "$temp_file"
              else
                echo "❌ Errore nel download o timeout: $url"
              fi
            done
          done


          echo "Creo JSON: $OUTPUT_JSON"
          echo '{' > "$OUTPUT_JSON"
          first_country=1
          for country in "${!country_links[@]}"; do
            [[ $first_country -eq 0 ]] && echo ',' >> "$OUTPUT_JSON"
            first_country=0
            echo -n "  \"$country\": [" >> "$OUTPUT_JSON"
            IFS=' ' read -r -a urls <<< "${country_links[$country]}"
            first_url=1
            for url in "${urls[@]}"; do
              [[ $first_url -eq 0 ]] && echo -n ', ' >> "$OUTPUT_JSON"
              first_url=0
              echo -n "\"${url}\"" >> "$OUTPUT_JSON"
            done
            echo "]" >> "$OUTPUT_JSON"
          done
          echo '}' >> "$OUTPUT_JSON"

          echo "✅ JSON creato: $OUTPUT_JSON"
          cat "$OUTPUT_JSON"


      - name: Commit and push changes
        uses: EndBug/add-and-commit@v9
        with:
          add: 'epg/xml/*.xml epg/stable-epg-sources.json'
          author_name: GitHub Actions
          author_email: actions@github.com
          message: 'Automated EPG update'
